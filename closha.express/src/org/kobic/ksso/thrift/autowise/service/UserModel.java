/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.kobic.ksso.thrift.autowise.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-04-17")
public class UserModel implements org.apache.thrift.TBase<UserModel, UserModel._Fields>, java.io.Serializable, Cloneable, Comparable<UserModel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserModel");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ORGANIZATION_FIELD_DESC = new org.apache.thrift.protocol.TField("organization", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField EMAIL_ADRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("email_adress", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField REGDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("regdate", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField LAST_LOGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("last_login", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField TEL_FIELD_DESC = new org.apache.thrift.protocol.TField("tel", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField HP_FIELD_DESC = new org.apache.thrift.protocol.TField("hp", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField FAX_FIELD_DESC = new org.apache.thrift.protocol.TField("fax", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField IDENTITY_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("identity_number", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField ADMIN_FIELD_DESC = new org.apache.thrift.protocol.TField("admin", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField TEMP_FIELD_DESC = new org.apache.thrift.protocol.TField("temp", org.apache.thrift.protocol.TType.STRING, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserModelStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserModelTupleSchemeFactory());
  }

  public int id; // required
  public String user_name; // required
  public String user_id; // required
  public String password; // required
  public String organization; // required
  public String position; // required
  public String email_adress; // required
  public String regdate; // required
  public String last_login; // required
  public String tel; // required
  public String hp; // required
  public String fax; // required
  public String identity_number; // required
  public boolean admin; // required
  public String temp; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    USER_NAME((short)2, "user_name"),
    USER_ID((short)3, "user_id"),
    PASSWORD((short)4, "password"),
    ORGANIZATION((short)5, "organization"),
    POSITION((short)6, "position"),
    EMAIL_ADRESS((short)7, "email_adress"),
    REGDATE((short)8, "regdate"),
    LAST_LOGIN((short)9, "last_login"),
    TEL((short)10, "tel"),
    HP((short)11, "hp"),
    FAX((short)12, "fax"),
    IDENTITY_NUMBER((short)13, "identity_number"),
    ADMIN((short)14, "admin"),
    TEMP((short)15, "temp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // USER_NAME
          return USER_NAME;
        case 3: // USER_ID
          return USER_ID;
        case 4: // PASSWORD
          return PASSWORD;
        case 5: // ORGANIZATION
          return ORGANIZATION;
        case 6: // POSITION
          return POSITION;
        case 7: // EMAIL_ADRESS
          return EMAIL_ADRESS;
        case 8: // REGDATE
          return REGDATE;
        case 9: // LAST_LOGIN
          return LAST_LOGIN;
        case 10: // TEL
          return TEL;
        case 11: // HP
          return HP;
        case 12: // FAX
          return FAX;
        case 13: // IDENTITY_NUMBER
          return IDENTITY_NUMBER;
        case 14: // ADMIN
          return ADMIN;
        case 15: // TEMP
          return TEMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __ADMIN_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORGANIZATION, new org.apache.thrift.meta_data.FieldMetaData("organization", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL_ADRESS, new org.apache.thrift.meta_data.FieldMetaData("email_adress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGDATE, new org.apache.thrift.meta_data.FieldMetaData("regdate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_LOGIN, new org.apache.thrift.meta_data.FieldMetaData("last_login", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEL, new org.apache.thrift.meta_data.FieldMetaData("tel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HP, new org.apache.thrift.meta_data.FieldMetaData("hp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FAX, new org.apache.thrift.meta_data.FieldMetaData("fax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDENTITY_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("identity_number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADMIN, new org.apache.thrift.meta_data.FieldMetaData("admin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL        , "boolean")));
    tmpMap.put(_Fields.TEMP, new org.apache.thrift.meta_data.FieldMetaData("temp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserModel.class, metaDataMap);
  }

  public UserModel() {
  }

  public UserModel(
    int id,
    String user_name,
    String user_id,
    String password,
    String organization,
    String position,
    String email_adress,
    String regdate,
    String last_login,
    String tel,
    String hp,
    String fax,
    String identity_number,
    boolean admin,
    String temp)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.user_name = user_name;
    this.user_id = user_id;
    this.password = password;
    this.organization = organization;
    this.position = position;
    this.email_adress = email_adress;
    this.regdate = regdate;
    this.last_login = last_login;
    this.tel = tel;
    this.hp = hp;
    this.fax = fax;
    this.identity_number = identity_number;
    this.admin = admin;
    setAdminIsSet(true);
    this.temp = temp;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserModel(UserModel other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetUser_name()) {
      this.user_name = other.user_name;
    }
    if (other.isSetUser_id()) {
      this.user_id = other.user_id;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    if (other.isSetOrganization()) {
      this.organization = other.organization;
    }
    if (other.isSetPosition()) {
      this.position = other.position;
    }
    if (other.isSetEmail_adress()) {
      this.email_adress = other.email_adress;
    }
    if (other.isSetRegdate()) {
      this.regdate = other.regdate;
    }
    if (other.isSetLast_login()) {
      this.last_login = other.last_login;
    }
    if (other.isSetTel()) {
      this.tel = other.tel;
    }
    if (other.isSetHp()) {
      this.hp = other.hp;
    }
    if (other.isSetFax()) {
      this.fax = other.fax;
    }
    if (other.isSetIdentity_number()) {
      this.identity_number = other.identity_number;
    }
    this.admin = other.admin;
    if (other.isSetTemp()) {
      this.temp = other.temp;
    }
  }

  public UserModel deepCopy() {
    return new UserModel(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.user_name = null;
    this.user_id = null;
    this.password = null;
    this.organization = null;
    this.position = null;
    this.email_adress = null;
    this.regdate = null;
    this.last_login = null;
    this.tel = null;
    this.hp = null;
    this.fax = null;
    this.identity_number = null;
    setAdminIsSet(false);
    this.admin = false;
    this.temp = null;
  }

  public int getId() {
    return this.id;
  }

  public UserModel setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getUser_name() {
    return this.user_name;
  }

  public UserModel setUser_name(String user_name) {
    this.user_name = user_name;
    return this;
  }

  public void unsetUser_name() {
    this.user_name = null;
  }

  /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_name() {
    return this.user_name != null;
  }

  public void setUser_nameIsSet(boolean value) {
    if (!value) {
      this.user_name = null;
    }
  }

  public String getUser_id() {
    return this.user_id;
  }

  public UserModel setUser_id(String user_id) {
    this.user_id = user_id;
    return this;
  }

  public void unsetUser_id() {
    this.user_id = null;
  }

  /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_id() {
    return this.user_id != null;
  }

  public void setUser_idIsSet(boolean value) {
    if (!value) {
      this.user_id = null;
    }
  }

  public String getPassword() {
    return this.password;
  }

  public UserModel setPassword(String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public String getOrganization() {
    return this.organization;
  }

  public UserModel setOrganization(String organization) {
    this.organization = organization;
    return this;
  }

  public void unsetOrganization() {
    this.organization = null;
  }

  /** Returns true if field organization is set (has been assigned a value) and false otherwise */
  public boolean isSetOrganization() {
    return this.organization != null;
  }

  public void setOrganizationIsSet(boolean value) {
    if (!value) {
      this.organization = null;
    }
  }

  public String getPosition() {
    return this.position;
  }

  public UserModel setPosition(String position) {
    this.position = position;
    return this;
  }

  public void unsetPosition() {
    this.position = null;
  }

  /** Returns true if field position is set (has been assigned a value) and false otherwise */
  public boolean isSetPosition() {
    return this.position != null;
  }

  public void setPositionIsSet(boolean value) {
    if (!value) {
      this.position = null;
    }
  }

  public String getEmail_adress() {
    return this.email_adress;
  }

  public UserModel setEmail_adress(String email_adress) {
    this.email_adress = email_adress;
    return this;
  }

  public void unsetEmail_adress() {
    this.email_adress = null;
  }

  /** Returns true if field email_adress is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail_adress() {
    return this.email_adress != null;
  }

  public void setEmail_adressIsSet(boolean value) {
    if (!value) {
      this.email_adress = null;
    }
  }

  public String getRegdate() {
    return this.regdate;
  }

  public UserModel setRegdate(String regdate) {
    this.regdate = regdate;
    return this;
  }

  public void unsetRegdate() {
    this.regdate = null;
  }

  /** Returns true if field regdate is set (has been assigned a value) and false otherwise */
  public boolean isSetRegdate() {
    return this.regdate != null;
  }

  public void setRegdateIsSet(boolean value) {
    if (!value) {
      this.regdate = null;
    }
  }

  public String getLast_login() {
    return this.last_login;
  }

  public UserModel setLast_login(String last_login) {
    this.last_login = last_login;
    return this;
  }

  public void unsetLast_login() {
    this.last_login = null;
  }

  /** Returns true if field last_login is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_login() {
    return this.last_login != null;
  }

  public void setLast_loginIsSet(boolean value) {
    if (!value) {
      this.last_login = null;
    }
  }

  public String getTel() {
    return this.tel;
  }

  public UserModel setTel(String tel) {
    this.tel = tel;
    return this;
  }

  public void unsetTel() {
    this.tel = null;
  }

  /** Returns true if field tel is set (has been assigned a value) and false otherwise */
  public boolean isSetTel() {
    return this.tel != null;
  }

  public void setTelIsSet(boolean value) {
    if (!value) {
      this.tel = null;
    }
  }

  public String getHp() {
    return this.hp;
  }

  public UserModel setHp(String hp) {
    this.hp = hp;
    return this;
  }

  public void unsetHp() {
    this.hp = null;
  }

  /** Returns true if field hp is set (has been assigned a value) and false otherwise */
  public boolean isSetHp() {
    return this.hp != null;
  }

  public void setHpIsSet(boolean value) {
    if (!value) {
      this.hp = null;
    }
  }

  public String getFax() {
    return this.fax;
  }

  public UserModel setFax(String fax) {
    this.fax = fax;
    return this;
  }

  public void unsetFax() {
    this.fax = null;
  }

  /** Returns true if field fax is set (has been assigned a value) and false otherwise */
  public boolean isSetFax() {
    return this.fax != null;
  }

  public void setFaxIsSet(boolean value) {
    if (!value) {
      this.fax = null;
    }
  }

  public String getIdentity_number() {
    return this.identity_number;
  }

  public UserModel setIdentity_number(String identity_number) {
    this.identity_number = identity_number;
    return this;
  }

  public void unsetIdentity_number() {
    this.identity_number = null;
  }

  /** Returns true if field identity_number is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentity_number() {
    return this.identity_number != null;
  }

  public void setIdentity_numberIsSet(boolean value) {
    if (!value) {
      this.identity_number = null;
    }
  }

  public boolean isAdmin() {
    return this.admin;
  }

  public UserModel setAdmin(boolean admin) {
    this.admin = admin;
    setAdminIsSet(true);
    return this;
  }

  public void unsetAdmin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADMIN_ISSET_ID);
  }

  /** Returns true if field admin is set (has been assigned a value) and false otherwise */
  public boolean isSetAdmin() {
    return EncodingUtils.testBit(__isset_bitfield, __ADMIN_ISSET_ID);
  }

  public void setAdminIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADMIN_ISSET_ID, value);
  }

  public String getTemp() {
    return this.temp;
  }

  public UserModel setTemp(String temp) {
    this.temp = temp;
    return this;
  }

  public void unsetTemp() {
    this.temp = null;
  }

  /** Returns true if field temp is set (has been assigned a value) and false otherwise */
  public boolean isSetTemp() {
    return this.temp != null;
  }

  public void setTempIsSet(boolean value) {
    if (!value) {
      this.temp = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUser_name();
      } else {
        setUser_name((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUser_id();
      } else {
        setUser_id((String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((String)value);
      }
      break;

    case ORGANIZATION:
      if (value == null) {
        unsetOrganization();
      } else {
        setOrganization((String)value);
      }
      break;

    case POSITION:
      if (value == null) {
        unsetPosition();
      } else {
        setPosition((String)value);
      }
      break;

    case EMAIL_ADRESS:
      if (value == null) {
        unsetEmail_adress();
      } else {
        setEmail_adress((String)value);
      }
      break;

    case REGDATE:
      if (value == null) {
        unsetRegdate();
      } else {
        setRegdate((String)value);
      }
      break;

    case LAST_LOGIN:
      if (value == null) {
        unsetLast_login();
      } else {
        setLast_login((String)value);
      }
      break;

    case TEL:
      if (value == null) {
        unsetTel();
      } else {
        setTel((String)value);
      }
      break;

    case HP:
      if (value == null) {
        unsetHp();
      } else {
        setHp((String)value);
      }
      break;

    case FAX:
      if (value == null) {
        unsetFax();
      } else {
        setFax((String)value);
      }
      break;

    case IDENTITY_NUMBER:
      if (value == null) {
        unsetIdentity_number();
      } else {
        setIdentity_number((String)value);
      }
      break;

    case ADMIN:
      if (value == null) {
        unsetAdmin();
      } else {
        setAdmin((Boolean)value);
      }
      break;

    case TEMP:
      if (value == null) {
        unsetTemp();
      } else {
        setTemp((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case USER_NAME:
      return getUser_name();

    case USER_ID:
      return getUser_id();

    case PASSWORD:
      return getPassword();

    case ORGANIZATION:
      return getOrganization();

    case POSITION:
      return getPosition();

    case EMAIL_ADRESS:
      return getEmail_adress();

    case REGDATE:
      return getRegdate();

    case LAST_LOGIN:
      return getLast_login();

    case TEL:
      return getTel();

    case HP:
      return getHp();

    case FAX:
      return getFax();

    case IDENTITY_NUMBER:
      return getIdentity_number();

    case ADMIN:
      return isAdmin();

    case TEMP:
      return getTemp();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case USER_NAME:
      return isSetUser_name();
    case USER_ID:
      return isSetUser_id();
    case PASSWORD:
      return isSetPassword();
    case ORGANIZATION:
      return isSetOrganization();
    case POSITION:
      return isSetPosition();
    case EMAIL_ADRESS:
      return isSetEmail_adress();
    case REGDATE:
      return isSetRegdate();
    case LAST_LOGIN:
      return isSetLast_login();
    case TEL:
      return isSetTel();
    case HP:
      return isSetHp();
    case FAX:
      return isSetFax();
    case IDENTITY_NUMBER:
      return isSetIdentity_number();
    case ADMIN:
      return isSetAdmin();
    case TEMP:
      return isSetTemp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserModel)
      return this.equals((UserModel)that);
    return false;
  }

  public boolean equals(UserModel that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_user_name = true && this.isSetUser_name();
    boolean that_present_user_name = true && that.isSetUser_name();
    if (this_present_user_name || that_present_user_name) {
      if (!(this_present_user_name && that_present_user_name))
        return false;
      if (!this.user_name.equals(that.user_name))
        return false;
    }

    boolean this_present_user_id = true && this.isSetUser_id();
    boolean that_present_user_id = true && that.isSetUser_id();
    if (this_present_user_id || that_present_user_id) {
      if (!(this_present_user_id && that_present_user_id))
        return false;
      if (!this.user_id.equals(that.user_id))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_organization = true && this.isSetOrganization();
    boolean that_present_organization = true && that.isSetOrganization();
    if (this_present_organization || that_present_organization) {
      if (!(this_present_organization && that_present_organization))
        return false;
      if (!this.organization.equals(that.organization))
        return false;
    }

    boolean this_present_position = true && this.isSetPosition();
    boolean that_present_position = true && that.isSetPosition();
    if (this_present_position || that_present_position) {
      if (!(this_present_position && that_present_position))
        return false;
      if (!this.position.equals(that.position))
        return false;
    }

    boolean this_present_email_adress = true && this.isSetEmail_adress();
    boolean that_present_email_adress = true && that.isSetEmail_adress();
    if (this_present_email_adress || that_present_email_adress) {
      if (!(this_present_email_adress && that_present_email_adress))
        return false;
      if (!this.email_adress.equals(that.email_adress))
        return false;
    }

    boolean this_present_regdate = true && this.isSetRegdate();
    boolean that_present_regdate = true && that.isSetRegdate();
    if (this_present_regdate || that_present_regdate) {
      if (!(this_present_regdate && that_present_regdate))
        return false;
      if (!this.regdate.equals(that.regdate))
        return false;
    }

    boolean this_present_last_login = true && this.isSetLast_login();
    boolean that_present_last_login = true && that.isSetLast_login();
    if (this_present_last_login || that_present_last_login) {
      if (!(this_present_last_login && that_present_last_login))
        return false;
      if (!this.last_login.equals(that.last_login))
        return false;
    }

    boolean this_present_tel = true && this.isSetTel();
    boolean that_present_tel = true && that.isSetTel();
    if (this_present_tel || that_present_tel) {
      if (!(this_present_tel && that_present_tel))
        return false;
      if (!this.tel.equals(that.tel))
        return false;
    }

    boolean this_present_hp = true && this.isSetHp();
    boolean that_present_hp = true && that.isSetHp();
    if (this_present_hp || that_present_hp) {
      if (!(this_present_hp && that_present_hp))
        return false;
      if (!this.hp.equals(that.hp))
        return false;
    }

    boolean this_present_fax = true && this.isSetFax();
    boolean that_present_fax = true && that.isSetFax();
    if (this_present_fax || that_present_fax) {
      if (!(this_present_fax && that_present_fax))
        return false;
      if (!this.fax.equals(that.fax))
        return false;
    }

    boolean this_present_identity_number = true && this.isSetIdentity_number();
    boolean that_present_identity_number = true && that.isSetIdentity_number();
    if (this_present_identity_number || that_present_identity_number) {
      if (!(this_present_identity_number && that_present_identity_number))
        return false;
      if (!this.identity_number.equals(that.identity_number))
        return false;
    }

    boolean this_present_admin = true;
    boolean that_present_admin = true;
    if (this_present_admin || that_present_admin) {
      if (!(this_present_admin && that_present_admin))
        return false;
      if (this.admin != that.admin)
        return false;
    }

    boolean this_present_temp = true && this.isSetTemp();
    boolean that_present_temp = true && that.isSetTemp();
    if (this_present_temp || that_present_temp) {
      if (!(this_present_temp && that_present_temp))
        return false;
      if (!this.temp.equals(that.temp))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_user_name = true && (isSetUser_name());
    list.add(present_user_name);
    if (present_user_name)
      list.add(user_name);

    boolean present_user_id = true && (isSetUser_id());
    list.add(present_user_id);
    if (present_user_id)
      list.add(user_id);

    boolean present_password = true && (isSetPassword());
    list.add(present_password);
    if (present_password)
      list.add(password);

    boolean present_organization = true && (isSetOrganization());
    list.add(present_organization);
    if (present_organization)
      list.add(organization);

    boolean present_position = true && (isSetPosition());
    list.add(present_position);
    if (present_position)
      list.add(position);

    boolean present_email_adress = true && (isSetEmail_adress());
    list.add(present_email_adress);
    if (present_email_adress)
      list.add(email_adress);

    boolean present_regdate = true && (isSetRegdate());
    list.add(present_regdate);
    if (present_regdate)
      list.add(regdate);

    boolean present_last_login = true && (isSetLast_login());
    list.add(present_last_login);
    if (present_last_login)
      list.add(last_login);

    boolean present_tel = true && (isSetTel());
    list.add(present_tel);
    if (present_tel)
      list.add(tel);

    boolean present_hp = true && (isSetHp());
    list.add(present_hp);
    if (present_hp)
      list.add(hp);

    boolean present_fax = true && (isSetFax());
    list.add(present_fax);
    if (present_fax)
      list.add(fax);

    boolean present_identity_number = true && (isSetIdentity_number());
    list.add(present_identity_number);
    if (present_identity_number)
      list.add(identity_number);

    boolean present_admin = true;
    list.add(present_admin);
    if (present_admin)
      list.add(admin);

    boolean present_temp = true && (isSetTemp());
    list.add(present_temp);
    if (present_temp)
      list.add(temp);

    return list.hashCode();
  }

  @Override
  public int compareTo(UserModel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(other.isSetUser_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, other.user_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser_id()).compareTo(other.isSetUser_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, other.user_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrganization()).compareTo(other.isSetOrganization());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrganization()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.organization, other.organization);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmail_adress()).compareTo(other.isSetEmail_adress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail_adress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email_adress, other.email_adress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegdate()).compareTo(other.isSetRegdate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegdate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regdate, other.regdate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLast_login()).compareTo(other.isSetLast_login());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_login()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_login, other.last_login);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTel()).compareTo(other.isSetTel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tel, other.tel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHp()).compareTo(other.isSetHp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hp, other.hp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFax()).compareTo(other.isSetFax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fax, other.fax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentity_number()).compareTo(other.isSetIdentity_number());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentity_number()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identity_number, other.identity_number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdmin()).compareTo(other.isSetAdmin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdmin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.admin, other.admin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemp()).compareTo(other.isSetTemp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.temp, other.temp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserModel(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("user_name:");
    if (this.user_name == null) {
      sb.append("null");
    } else {
      sb.append(this.user_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("user_id:");
    if (this.user_id == null) {
      sb.append("null");
    } else {
      sb.append(this.user_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("password:");
    if (this.password == null) {
      sb.append("null");
    } else {
      sb.append(this.password);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("organization:");
    if (this.organization == null) {
      sb.append("null");
    } else {
      sb.append(this.organization);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("position:");
    if (this.position == null) {
      sb.append("null");
    } else {
      sb.append(this.position);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("email_adress:");
    if (this.email_adress == null) {
      sb.append("null");
    } else {
      sb.append(this.email_adress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regdate:");
    if (this.regdate == null) {
      sb.append("null");
    } else {
      sb.append(this.regdate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("last_login:");
    if (this.last_login == null) {
      sb.append("null");
    } else {
      sb.append(this.last_login);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tel:");
    if (this.tel == null) {
      sb.append("null");
    } else {
      sb.append(this.tel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hp:");
    if (this.hp == null) {
      sb.append("null");
    } else {
      sb.append(this.hp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fax:");
    if (this.fax == null) {
      sb.append("null");
    } else {
      sb.append(this.fax);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("identity_number:");
    if (this.identity_number == null) {
      sb.append("null");
    } else {
      sb.append(this.identity_number);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("admin:");
    sb.append(this.admin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("temp:");
    if (this.temp == null) {
      sb.append("null");
    } else {
      sb.append(this.temp);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserModelStandardSchemeFactory implements SchemeFactory {
    public UserModelStandardScheme getScheme() {
      return new UserModelStandardScheme();
    }
  }

  private static class UserModelStandardScheme extends StandardScheme<UserModel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user_name = iprot.readString();
              struct.setUser_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user_id = iprot.readString();
              struct.setUser_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ORGANIZATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.organization = iprot.readString();
              struct.setOrganizationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.position = iprot.readString();
              struct.setPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EMAIL_ADRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email_adress = iprot.readString();
              struct.setEmail_adressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REGDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regdate = iprot.readString();
              struct.setRegdateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LAST_LOGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.last_login = iprot.readString();
              struct.setLast_loginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tel = iprot.readString();
              struct.setTelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // HP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hp = iprot.readString();
              struct.setHpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FAX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fax = iprot.readString();
              struct.setFaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // IDENTITY_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identity_number = iprot.readString();
              struct.setIdentity_numberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ADMIN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.admin = iprot.readBool();
              struct.setAdminIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TEMP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.temp = iprot.readString();
              struct.setTempIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserModel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.user_name != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(struct.user_name);
        oprot.writeFieldEnd();
      }
      if (struct.user_id != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.user_id);
        oprot.writeFieldEnd();
      }
      if (struct.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(struct.password);
        oprot.writeFieldEnd();
      }
      if (struct.organization != null) {
        oprot.writeFieldBegin(ORGANIZATION_FIELD_DESC);
        oprot.writeString(struct.organization);
        oprot.writeFieldEnd();
      }
      if (struct.position != null) {
        oprot.writeFieldBegin(POSITION_FIELD_DESC);
        oprot.writeString(struct.position);
        oprot.writeFieldEnd();
      }
      if (struct.email_adress != null) {
        oprot.writeFieldBegin(EMAIL_ADRESS_FIELD_DESC);
        oprot.writeString(struct.email_adress);
        oprot.writeFieldEnd();
      }
      if (struct.regdate != null) {
        oprot.writeFieldBegin(REGDATE_FIELD_DESC);
        oprot.writeString(struct.regdate);
        oprot.writeFieldEnd();
      }
      if (struct.last_login != null) {
        oprot.writeFieldBegin(LAST_LOGIN_FIELD_DESC);
        oprot.writeString(struct.last_login);
        oprot.writeFieldEnd();
      }
      if (struct.tel != null) {
        oprot.writeFieldBegin(TEL_FIELD_DESC);
        oprot.writeString(struct.tel);
        oprot.writeFieldEnd();
      }
      if (struct.hp != null) {
        oprot.writeFieldBegin(HP_FIELD_DESC);
        oprot.writeString(struct.hp);
        oprot.writeFieldEnd();
      }
      if (struct.fax != null) {
        oprot.writeFieldBegin(FAX_FIELD_DESC);
        oprot.writeString(struct.fax);
        oprot.writeFieldEnd();
      }
      if (struct.identity_number != null) {
        oprot.writeFieldBegin(IDENTITY_NUMBER_FIELD_DESC);
        oprot.writeString(struct.identity_number);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ADMIN_FIELD_DESC);
      oprot.writeBool(struct.admin);
      oprot.writeFieldEnd();
      if (struct.temp != null) {
        oprot.writeFieldBegin(TEMP_FIELD_DESC);
        oprot.writeString(struct.temp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserModelTupleSchemeFactory implements SchemeFactory {
    public UserModelTupleScheme getScheme() {
      return new UserModelTupleScheme();
    }
  }

  private static class UserModelTupleScheme extends TupleScheme<UserModel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserModel struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetUser_name()) {
        optionals.set(1);
      }
      if (struct.isSetUser_id()) {
        optionals.set(2);
      }
      if (struct.isSetPassword()) {
        optionals.set(3);
      }
      if (struct.isSetOrganization()) {
        optionals.set(4);
      }
      if (struct.isSetPosition()) {
        optionals.set(5);
      }
      if (struct.isSetEmail_adress()) {
        optionals.set(6);
      }
      if (struct.isSetRegdate()) {
        optionals.set(7);
      }
      if (struct.isSetLast_login()) {
        optionals.set(8);
      }
      if (struct.isSetTel()) {
        optionals.set(9);
      }
      if (struct.isSetHp()) {
        optionals.set(10);
      }
      if (struct.isSetFax()) {
        optionals.set(11);
      }
      if (struct.isSetIdentity_number()) {
        optionals.set(12);
      }
      if (struct.isSetAdmin()) {
        optionals.set(13);
      }
      if (struct.isSetTemp()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetUser_name()) {
        oprot.writeString(struct.user_name);
      }
      if (struct.isSetUser_id()) {
        oprot.writeString(struct.user_id);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetOrganization()) {
        oprot.writeString(struct.organization);
      }
      if (struct.isSetPosition()) {
        oprot.writeString(struct.position);
      }
      if (struct.isSetEmail_adress()) {
        oprot.writeString(struct.email_adress);
      }
      if (struct.isSetRegdate()) {
        oprot.writeString(struct.regdate);
      }
      if (struct.isSetLast_login()) {
        oprot.writeString(struct.last_login);
      }
      if (struct.isSetTel()) {
        oprot.writeString(struct.tel);
      }
      if (struct.isSetHp()) {
        oprot.writeString(struct.hp);
      }
      if (struct.isSetFax()) {
        oprot.writeString(struct.fax);
      }
      if (struct.isSetIdentity_number()) {
        oprot.writeString(struct.identity_number);
      }
      if (struct.isSetAdmin()) {
        oprot.writeBool(struct.admin);
      }
      if (struct.isSetTemp()) {
        oprot.writeString(struct.temp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserModel struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.user_name = iprot.readString();
        struct.setUser_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.user_id = iprot.readString();
        struct.setUser_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(4)) {
        struct.organization = iprot.readString();
        struct.setOrganizationIsSet(true);
      }
      if (incoming.get(5)) {
        struct.position = iprot.readString();
        struct.setPositionIsSet(true);
      }
      if (incoming.get(6)) {
        struct.email_adress = iprot.readString();
        struct.setEmail_adressIsSet(true);
      }
      if (incoming.get(7)) {
        struct.regdate = iprot.readString();
        struct.setRegdateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.last_login = iprot.readString();
        struct.setLast_loginIsSet(true);
      }
      if (incoming.get(9)) {
        struct.tel = iprot.readString();
        struct.setTelIsSet(true);
      }
      if (incoming.get(10)) {
        struct.hp = iprot.readString();
        struct.setHpIsSet(true);
      }
      if (incoming.get(11)) {
        struct.fax = iprot.readString();
        struct.setFaxIsSet(true);
      }
      if (incoming.get(12)) {
        struct.identity_number = iprot.readString();
        struct.setIdentity_numberIsSet(true);
      }
      if (incoming.get(13)) {
        struct.admin = iprot.readBool();
        struct.setAdminIsSet(true);
      }
      if (incoming.get(14)) {
        struct.temp = iprot.readString();
        struct.setTempIsSet(true);
      }
    }
  }

}

